name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # to cache files we must create a step before the files that we want to cache
      # we must specify the path or paths that should be cached
      # we must also specify a key that will be used to retrieve the cache 
      # the key also indicates wether the cache should be discarded because it must be recreated
      # because a dependency changed, thats why we give it a non-static-hard-coded name
      # if the cache already existed then it wont be recreated, but will be re-used 
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # the function provided here creates a unique hash value based on a file path
          # the hash value will change whenever the file we are passing changes
          # the file package-lock.json specifies all the dependencies of the projects
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # define outputs identifiers of your job
    # steps is the context which we are accessing (where steps data is stored)
    # then we access the id of one of our steps and then the output we defined
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # here we are using the cached dependencies by accessing the directory
      # created in the cache dependencies step in previous job  
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # GITHUB_OUTPUT is a file created by the github environment where the
        # output value pair is written into
        # the id is used to access data linked to that id (in this case the output of the step)
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' 
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # name of the artifact zip
          name: dist-files
          # paths that will be uploaded as artifacts to github
          path: dist
          # path: |
          #   dist
          #   package.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with: 
          name: dist-files
      # after downloading the artifacts to our runner, the folder dist-files will be lost and we will
      # only be able to view the list of the downloaded artifacts
      - name: Output contents
        run: ls
      # access the context of a job with needs and then the job name    
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
       
